import * as fs from 'fs';
import * as path from 'path';
import { ChatIMUService } from './services/chat-imu-service';

async function testChatIMUService() {
  console.log('üí¨ TEST CHAT IMU SERVICE - CONVERSAZIONE COMPLETA');
  console.log('=' .repeat(60));

  const chatService = new ChatIMUService();

  try {
    // 1. Inizia nuova sessione
    console.log('\nüöÄ 1Ô∏è‚É£ Avvio nuova sessione chat');
    const sessionId = chatService.startNewSession();
    console.log(`‚úÖ Sessione creata: ${sessionId}`);

    // Ottieni stato iniziale
    const initialState = chatService.getSessionState(sessionId);
    console.log(`üìã Fase iniziale: ${initialState?.phase}`);
    console.log(`üí¨ Messaggio di benvenuto: ${initialState?.conversationHistory?.[0]?.content.slice(0, 50)}...`);

    // 2. Simula upload file CSV
    console.log('\nüì§ 2Ô∏è‚É£ Simulazione upload file visure');
    
    const csvContent = `tipo,comune,provincia,foglio,particella,subalterno,categoria,classe,consistenza,superficie,rendita,qualita,reddito_dominicale,reddito_agrario,ubicazione,zona,piano,interno,codice_catastale,sezione,sezione_urbana
fabbricato,Milano,MI,123,456,1,A/2,3,5.5,90,1234.56,,,,"Via Roma 1","Zona 1",2,"int. A",F205,,
fabbricato,Milano,MI,124,789,2,C/1,2,1,,890.00,,,,"Via Verdi 10","Zona 2",1,"",F205,,
terreno,Milano,MI,125,101,,,2,,5000,,SEMINATIVO,123.45,89.10,"Localit√† Campagna",,,,F205,A,`;

    const files = [
      {
        buffer: Buffer.from(csvContent, 'utf8'),
        name: 'visure-test.csv',
        mimeType: 'text/csv'
      }
    ];

    const uploadMessages = await chatService.handleFileUpload(sessionId, files);
    console.log(`‚úÖ Upload processato, ${uploadMessages.length} messaggi generati:`);
    
    uploadMessages.forEach((msg, i) => {
      console.log(`   ${i + 1}. [${msg.sender.toUpperCase()}] ${msg.content.slice(0, 80)}...`);
      if (msg.metadata) {
        console.log(`      Metadata: ${JSON.stringify(msg.metadata)}`);
      }
    });

    // 3. Controlla stato dopo upload
    console.log('\nüîç 3Ô∏è‚É£ Stato dopo upload');
    const postUploadState = chatService.getSessionState(sessionId);
    console.log(`üìã Fase corrente: ${postUploadState?.phase}`);
    console.log(`üí¨ Totale messaggi: ${postUploadState?.conversationHistory?.length || 0}`);

    // 4. Simula risposta utente
    console.log('\nüí¨ 4Ô∏è‚É£ Simulazione risposta utente');
    const userMessage = "I dati sembrano corretti, procediamo";
    const userMessages = await chatService.handleUserMessage(sessionId, userMessage);
    
    console.log(`‚úÖ Risposta utente processata:`);
    userMessages.forEach((msg, i) => {
      console.log(`   ${i + 1}. [${msg.sender.toUpperCase()}] ${msg.content.slice(0, 80)}...`);
    });

    // 5. Simula azione "procedi alle domande"
    console.log('\n‚ùì 5Ô∏è‚É£ Avvio questionario');
    const questionMessages = await chatService.handleUserAction(sessionId, 'proceed_to_questions');
    
    console.log(`‚úÖ Questionario avviato:`);
    questionMessages.forEach((msg, i) => {
      console.log(`   ${i + 1}. [${msg.sender.toUpperCase()}] ${msg.content.slice(0, 80)}...`);
      if (msg.metadata?.questionId) {
        console.log(`      Domanda ID: ${msg.metadata.questionId}`);
      }
    });

    // 6. Simula risposta alla prima domanda (residenza principale)
    console.log('\nüè† 6Ô∏è‚É£ Risposta domanda residenza');
    const answerData = {
      questionId: 'residenza_principale',
      answer: '0' // Prima opzione (Via Roma 1)
    };
    
    const answerMessages = await chatService.handleUserAction(sessionId, 'answer_question', answerData);
    
    console.log(`‚úÖ Risposta registrata:`);
    answerMessages.forEach((msg, i) => {
      console.log(`   ${i + 1}. [${msg.sender.toUpperCase()}] ${msg.content.slice(0, 80)}...`);
    });

    // 7. Simula risposta alla seconda domanda (agevolazioni)
    console.log('\nüí∞ 7Ô∏è‚É£ Risposta domanda agevolazioni');
    const agevolazioniData = {
      questionId: 'agevolazioni',
      answer: 'prima_casa'
    };
    
    const agevolazioniMessages = await chatService.handleUserAction(sessionId, 'answer_question', agevolazioniData);
    
    console.log(`‚úÖ Agevolazioni registrate:`);
    agevolazioniMessages.forEach((msg, i) => {
      console.log(`   ${i + 1}. [${msg.sender.toUpperCase()}] ${msg.content.slice(0, 80)}...`);
    });

    // 8. A questo punto dovrebbe partire automaticamente il calcolo
    console.log('\nüßÆ 8Ô∏è‚É£ Verifica calcolo automatico');
    const finalState = chatService.getSessionState(sessionId);
    console.log(`üìã Fase finale: ${finalState?.phase}`);
    
    // Cerca messaggio di calcolo nella cronologia
    const calculationMessage = finalState?.conversationHistory?.find(msg => 
      msg.type === 'calculation' && msg.sender === 'ai'
    );
    
    if (calculationMessage) {
      console.log(`‚úÖ Calcolo IMU completato!`);
      console.log(`üí∞ Risultato: ${calculationMessage.content.slice(0, 200)}...`);
      
      if (calculationMessage.metadata?.calculation) {
        const calc = calculationMessage.metadata.calculation;
        console.log(`\nüìä Dettagli calcolo:`);
        console.log(`   üí∞ IMU Totale: ‚Ç¨${calc.totalIMU?.toFixed(2)}`);
        console.log(`   üè† Immobili calcolati: ${calc.details?.length}`);
        console.log(`   üìÖ Scadenze: ${calc.scadenze?.length}`);
      }
    }

    // 9. Simula generazione report
    console.log('\nüìë 9Ô∏è‚É£ Generazione report PDF');
    const reportMessages = await chatService.handleUserAction(sessionId, 'generate_report');
    
    console.log(`‚úÖ Report generato:`);
    reportMessages.forEach((msg, i) => {
      console.log(`   ${i + 1}. [${msg.sender.toUpperCase()}] ${msg.content.slice(0, 80)}...`);
      if (msg.metadata?.reportContent) {
        console.log(`      üìÑ Dimensione report: ${msg.metadata.reportContent.length} caratteri`);
        console.log(`      üìÅ Nome file: ${msg.metadata.fileName}`);
      }
    });

    // 10. Statistiche finali
    console.log('\nüìà üîü Statistiche sessione completa');
    const stats = chatService.getSessionState(sessionId);
    if (stats && stats.startedAt && stats.conversationHistory) {
      console.log(`üìä Statistiche conversazione:`);
      console.log(`   ‚è±Ô∏è  Durata: ${Date.now() - stats.startedAt.getTime()}ms`);
      console.log(`   üí¨ Messaggi totali: ${stats.conversationHistory.length}`);
      console.log(`   üìù Fasi attraversate: welcome ‚Üí analysis ‚Üí questions ‚Üí calculation ‚Üí report`);
      
      const messagesByType = stats.conversationHistory.reduce((acc, msg) => {
        acc[msg.type] = (acc[msg.type] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);
      
      console.log(`   üìã Messaggi per tipo:`);
      Object.entries(messagesByType).forEach(([type, count]) => {
        console.log(`      ${type}: ${count}`);
      });

      const messagesBySender = stats.conversationHistory.reduce((acc, msg) => {
        acc[msg.sender] = (acc[msg.sender] || 0) + 1;
        return acc;
      }, {} as Record<string, number>);
      
      console.log(`   üë• Messaggi per mittente:`);
      Object.entries(messagesBySender).forEach(([sender, count]) => {
        console.log(`      ${sender}: ${count}`);
      });
    }

    // 11. Test template CSV
    console.log('\nüìÑ 1Ô∏è‚É£1Ô∏è‚É£ Test template CSV');
    const template = chatService.getCSVTemplate();
    console.log(`‚úÖ Template generato:`);
    console.log(`   üìÅ Nome: ${template.fileName}`);
    console.log(`   üìè Dimensione: ${template.content.length} caratteri`);
    console.log(`   üîç Header: ${template.content.split('\n')[0]}`);

    console.log('\nüéØ VANTAGGI INTERFACCIA CONVERSAZIONALE:');
    console.log(`
‚úÖ USER EXPERIENCE:
   ‚Ä¢ Interfaccia familiare tipo ChatGPT
   ‚Ä¢ Guida step-by-step automatica
   ‚Ä¢ Feedback immediato su ogni azione
   ‚Ä¢ Spiegazioni chiare della logica applicata

‚úÖ PROCESSO SEMPLIFICATO:
   ‚Ä¢ Upload ‚Üí Analisi ‚Üí Domande ‚Üí Calcolo ‚Üí Report
   ‚Ä¢ Nessun form complesso da compilare
   ‚Ä¢ Domande contestuali basate sui dati
   ‚Ä¢ Validazione automatica input

‚úÖ TRASPARENZA:
   ‚Ä¢ Ogni passaggio spiegato
   ‚Ä¢ Logica di calcolo mostrata
   ‚Ä¢ Avvertenze e raccomandazioni
   ‚Ä¢ Report dettagliato scaricabile

‚úÖ FLESSIBILIT√Ä:
   ‚Ä¢ Correzioni in tempo reale
   ‚Ä¢ Modifica dati se necessario
   ‚Ä¢ Ripetizione calcolo con nuovi parametri
   ‚Ä¢ Sessioni persistent per 1 ora

üí° QUESTA √à L'EVOLUZIONE DELL'IMU 2025!
   Da form complessi a conversazione naturale
   Da calcoli manuali a assistente intelligente
   Da risultati secchi a spiegazioni dettagliate
`);

  } catch (error) {
    console.error('\n‚ùå Errore durante il test:', error);
  }
}

testChatIMUService()
  .then(() => console.log('\n‚úÖ Test chat IMU service completato'))
  .catch(error => console.error('\n‚ùå Test fallito:', error)); 