"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze/route";
exports.ids = ["app/api/analyze/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "buffer":
/*!*************************!*\
  !*** external "buffer" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("buffer");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "events":
/*!*************************!*\
  !*** external "events" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("events");

/***/ }),

/***/ "fs":
/*!*********************!*\
  !*** external "fs" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("fs");

/***/ }),

/***/ "http":
/*!***********************!*\
  !*** external "http" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("http");

/***/ }),

/***/ "https":
/*!************************!*\
  !*** external "https" ***!
  \************************/
/***/ ((module) => {

module.exports = require("https");

/***/ }),

/***/ "net":
/*!**********************!*\
  !*** external "net" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("net");

/***/ }),

/***/ "punycode":
/*!***************************!*\
  !*** external "punycode" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("punycode");

/***/ }),

/***/ "stream":
/*!*************************!*\
  !*** external "stream" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("stream");

/***/ }),

/***/ "tls":
/*!**********************!*\
  !*** external "tls" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("tls");

/***/ }),

/***/ "url":
/*!**********************!*\
  !*** external "url" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("url");

/***/ }),

/***/ "zlib":
/*!***********************!*\
  !*** external "zlib" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("zlib");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=%2FUsers%2Fmattiapicca%2FDocuments%2Flivn%2Flivn%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmattiapicca%2FDocuments%2Flivn%2Flivn&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=%2FUsers%2Fmattiapicca%2FDocuments%2Flivn%2Flivn%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmattiapicca%2FDocuments%2Flivn%2Flivn&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_mattiapicca_Documents_livn_livn_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/analyze/route.ts */ \"(rsc)/./app/api/analyze/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze/route\",\n        pathname: \"/api/analyze\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze/route\"\n    },\n    resolvedPagePath: \"/Users/mattiapicca/Documents/livn/livn/app/api/analyze/route.ts\",\n    nextConfigOutput,\n    userland: _Users_mattiapicca_Documents_livn_livn_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/analyze/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhbmFseXplJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhbmFseXplJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYW5hbHl6ZSUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRm1hdHRpYXBpY2NhJTJGRG9jdW1lbnRzJTJGbGl2biUyRmxpdm4lMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGbWF0dGlhcGljY2ElMkZEb2N1bWVudHMlMkZsaXZuJTJGbGl2biZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDZTtBQUM1RjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0hBQW1CO0FBQzNDO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsWUFBWTtBQUNaLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSxRQUFRLGlFQUFpRTtBQUN6RTtBQUNBO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ3VIOztBQUV2SCIsInNvdXJjZXMiOlsid2VicGFjazovL2xpdm4taW11LWNhbGN1bGF0b3IvPzIwODQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL21hdHRpYXBpY2NhL0RvY3VtZW50cy9saXZuL2xpdm4vYXBwL2FwaS9hbmFseXplL3JvdXRlLnRzXCI7XG4vLyBXZSBpbmplY3QgdGhlIG5leHRDb25maWdPdXRwdXQgaGVyZSBzbyB0aGF0IHdlIGNhbiB1c2UgdGhlbSBpbiB0aGUgcm91dGVcbi8vIG1vZHVsZS5cbmNvbnN0IG5leHRDb25maWdPdXRwdXQgPSBcIlwiXG5jb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBBcHBSb3V0ZVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5BUFBfUk9VVEUsXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9hbmFseXplL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvYW5hbHl6ZVwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvYW5hbHl6ZS9yb3V0ZVwiXG4gICAgfSxcbiAgICByZXNvbHZlZFBhZ2VQYXRoOiBcIi9Vc2Vycy9tYXR0aWFwaWNjYS9Eb2N1bWVudHMvbGl2bi9saXZuL2FwcC9hcGkvYW5hbHl6ZS9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzIH0gPSByb3V0ZU1vZHVsZTtcbmNvbnN0IG9yaWdpbmFsUGF0aG5hbWUgPSBcIi9hcGkvYW5hbHl6ZS9yb3V0ZVwiO1xuZnVuY3Rpb24gcGF0Y2hGZXRjaCgpIHtcbiAgICByZXR1cm4gX3BhdGNoRmV0Y2goe1xuICAgICAgICBzZXJ2ZXJIb29rcyxcbiAgICAgICAgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZVxuICAgIH0pO1xufVxuZXhwb3J0IHsgcm91dGVNb2R1bGUsIHJlcXVlc3RBc3luY1N0b3JhZ2UsIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=%2FUsers%2Fmattiapicca%2FDocuments%2Flivn%2Flivn%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmattiapicca%2FDocuments%2Flivn%2Flivn&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./app/api/analyze/route.ts":
/*!**********************************!*\
  !*** ./app/api/analyze/route.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/supabase-js */ \"(rsc)/./node_modules/@supabase/supabase-js/dist/module/index.js\");\n\n\nasync function POST(request) {\n    try {\n        const formData = await request.formData();\n        const files = formData.getAll(\"files\");\n        if (!files || files.length === 0) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Nessun file da analizzare\"\n            }, {\n                status: 400\n            });\n        }\n        console.log(`🔍 Analizzando ${files.length} documenti PDF...`);\n        const properties = [];\n        for (const file of files){\n            console.log(`📄 Analizzando: ${file.name}`);\n            try {\n                // Estrai il testo dal PDF\n                const arrayBuffer = await file.arrayBuffer();\n                const text = await extractTextFromPDF(arrayBuffer);\n                console.log(`📝 Testo estratto (${text.length} caratteri)`);\n                console.log(\"\\uD83D\\uDD0D Prime 500 caratteri del testo:\");\n                console.log(text.substring(0, 500));\n                console.log(\"\\uD83D\\uDD0D Ultime 500 caratteri del testo:\");\n                console.log(text.substring(Math.max(0, text.length - 500)));\n                if (text.length > 0) {\n                    // Analizza il testo con AI\n                    const extractedProperties = await analyzeTextWithAI(text, file.name);\n                    const enriched = await enrichPropertiesWithMunicipality(extractedProperties);\n                    properties.push(...enriched);\n                } else {\n                    console.log(\"⚠️ Nessun testo estratto dal PDF\");\n                    console.log(\"\\uD83D\\uDCCB Creando propriet\\xe0 vuota per inserimento manuale\");\n                    properties.push(createEmptyProperty(file.name));\n                }\n            } catch (error) {\n                console.error(`❌ Errore analisi ${file.name}:`, error);\n                // In caso di errore, crea una proprietà vuota\n                properties.push(createEmptyProperty(file.name));\n            }\n        }\n        console.log(`✅ Analisi completata: ${properties.length} immobili trovati`);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: true,\n            properties,\n            message: `Analizzati ${files.length} documenti, trovati ${properties.length} immobili`\n        });\n    } catch (error) {\n        console.error(\"Errore durante l'analisi:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Errore durante l'analisi dei documenti\"\n        }, {\n            status: 500\n        });\n    }\n}\n// Estrae il testo dal PDF usando pdf-parse-new\nasync function extractTextFromPDF(arrayBuffer) {\n    try {\n        // Import dinamico di pdf-parse-new\n        const pdfParse = (await __webpack_require__.e(/*! import() */ \"vendor-chunks/pdf-parse-new\").then(__webpack_require__.t.bind(__webpack_require__, /*! pdf-parse-new */ \"(rsc)/./node_modules/pdf-parse-new/lib/pdf-parse.js\", 23))).default;\n        const buffer = Buffer.from(arrayBuffer);\n        const data = await pdfParse(buffer);\n        console.log(`📄 PDF info: ${data.numpages} pagine, ${data.text.length} caratteri`);\n        return data.text.trim();\n    } catch (error) {\n        console.error(\"Errore estrazione testo PDF:\", error);\n        return \"\";\n    }\n}\n// Analizza il testo estratto con OpenAI\nasync function analyzeTextWithAI(text, fileName) {\n    const openaiKey = process.env.OPENAI_API_KEY;\n    if (!openaiKey || openaiKey.includes(\"your_\")) {\n        console.log(\"⚠️ Chiave OpenAI non configurata, uso analisi pattern-based\");\n        return analyzeTextWithPatterns(text, fileName);\n    }\n    try {\n        console.log(\"\\uD83E\\uDD16 Chiamata OpenAI API...\");\n        const prompt = `\nAnalizza il seguente testo estratto da un documento catastale e identifica tutte le proprietà immobiliari.\nPer ogni proprietà, estrai:\n- Indirizzo completo\n- Comune e provincia (es. \"Alessandria (AL)\")\n- Categoria catastale (es. \"A/2\")\n- Rendita catastale in euro\n- Quota di possesso (es. \"1/2\" o \"1000/1000\" - converti in percentuale: 1/2 = 50%, 1000/1000 = 100%)\n- Superficie in metri quadri (se disponibile)\n- Numero di vani (se disponibile)\n- Foglio, particella e subalterno (se disponibili)\n\nIMPORTANTE:\n- NON inventare il codice comune catastale, estrai solo il nome del comune e la provincia.\n- La quota di possesso deve essere convertita in percentuale (es. 1/2 = 50%, 1/1 = 100%)\n- Per le categorie A (abitazioni) la consistenza è in VANI\n- Per le categorie C (commerciali) la consistenza è in METRI QUADRI\n\nRestituisci i dati in formato JSON array, dove ogni oggetto rappresenta una proprietà.\nEsempio:\n[\n  {\n    \"address\": \"Via Roma 123\",\n    \"comune\": \"Alessandria\",\n    \"provincia\": \"AL\",\n    \"categoriaCatastale\": \"A/2\",\n    \"renditaCatastale\": 1000.00,\n    \"quotaPossesso\": 50,\n    \"superficie\": 85,\n    \"vani\": 4,\n    \"foglio\": \"123\",\n    \"particella\": \"456\",\n    \"subalterno\": \"1\"\n  }\n]\n\nTesto da analizzare:\n${text}\n`;\n        const response = await fetch(\"https://api.openai.com/v1/chat/completions\", {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${openaiKey}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                model: \"gpt-3.5-turbo\",\n                messages: [\n                    {\n                        role: \"user\",\n                        content: prompt\n                    }\n                ],\n                temperature: 0.1,\n                max_tokens: 2000\n            })\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"OpenAI API Error:\", response.status, errorText);\n            throw new Error(`API Error: ${response.status}`);\n        }\n        const data = await response.json();\n        const aiResponse = data.choices[0].message.content;\n        console.log(\"\\uD83E\\uDD16 Risposta OpenAI ricevuta\");\n        console.log(\"\\uD83D\\uDCCB Dati estratti da OpenAI:\", aiResponse);\n        // Parse della risposta JSON\n        const extractedData = JSON.parse(aiResponse);\n        // Converte in oggetti Property con mapping completo\n        return extractedData.map((item, index)=>{\n            const property = item;\n            // Converti quota possesso in percentuale\n            let quotaPercentuale = 100;\n            const quotaStr = property.quotaPossesso;\n            if (quotaStr) {\n                if (quotaStr.includes(\"/\")) {\n                    const [numeratore, denominatore] = quotaStr.split(\"/\").map((n)=>parseInt(n.trim()));\n                    if (denominatore > 0) {\n                        quotaPercentuale = Math.round(numeratore / denominatore * 100);\n                    }\n                } else if (!isNaN(Number(quotaStr))) {\n                    quotaPercentuale = Number(quotaStr);\n                }\n            }\n            // Ignora qualsiasi campo codiceComune restituito dall'AI\n            return {\n                id: generateId(),\n                address: property.address || `Immobile ${index + 1} da ${fileName}`,\n                comune: property.comune || \"\",\n                provincia: property.provincia || \"\",\n                codiceComune: \"\",\n                categoriaCatastale: property.categoriaCatastale || \"\",\n                renditaCatastale: Number(property.renditaCatastale) || 0,\n                quotaPossesso: quotaPercentuale,\n                superficie: Number(property.superficie) || undefined,\n                vani: Number(property.vani) || undefined,\n                abitazionePrincipale: false,\n                locato: false,\n                pertinenze: [],\n                foglio: property.foglio || undefined,\n                particella: property.particella || undefined,\n                subalterno: property.subalterno || undefined,\n                analisiCompleta: true,\n                datiMancanti: []\n            };\n        });\n    } catch (error) {\n        console.error(\"❌ Errore analisi OpenAI:\", error);\n        console.error(\"❌ Dettagli errore:\", error instanceof Error ? error.message : String(error));\n        return analyzeTextWithPatterns(text, fileName);\n    }\n}\n// Analisi basata su pattern regex (fallback)\nfunction analyzeTextWithPatterns(text, fileName) {\n    console.log(\"\\uD83D\\uDD0D Usando analisi pattern-based...\");\n    const properties = [];\n    // Pattern per trovare informazioni catastali\n    const patterns = {\n        comune: /(?:Comune|COMUNE)[\\s:]+([A-Z][A-Za-z\\s]+)/gi,\n        provincia: /\\(([A-Z]{2})\\)/g,\n        codiceComune: /(?:Codice|CODICE)[\\s:]*Comune[\\s:]*([A-Z]\\d{3})/gi,\n        categoria: /(A\\/\\d+|B\\/\\d+|C\\/\\d+|D\\/\\d+)/gi,\n        rendita: /(?:rendita|RENDITA)[\\s:]*€?\\s*(\\d+[.,]\\d+)/gi,\n        foglio: /(?:foglio|FOGLIO)[\\s:]*(\\d+)/gi,\n        particella: /(?:particella|PARTICELLA)[\\s:]*(\\d+)/gi,\n        subalterno: /(?:sub|SUB|subalterno|SUBALTERNO)[\\s:]*(\\d+)/gi\n    };\n    // Estrai i dati usando i pattern\n    const comuni = Array.from(text.matchAll(patterns.comune)).map((m)=>m[1].trim());\n    const province = Array.from(text.matchAll(patterns.provincia)).map((m)=>m[1]);\n    const codiciComune = Array.from(text.matchAll(patterns.codiceComune)).map((m)=>m[1]);\n    const categorie = Array.from(text.matchAll(patterns.categoria)).map((m)=>m[1]);\n    const rendite = Array.from(text.matchAll(patterns.rendita)).map((m)=>parseFloat(m[1].replace(\",\", \".\")));\n    // Crea proprietà basate sui dati trovati\n    const numProperties = Math.max(categorie.length, rendite.length, 1);\n    for(let i = 0; i < numProperties; i++){\n        properties.push({\n            id: generateId(),\n            address: `Immobile ${i + 1} da ${fileName}`,\n            comune: comuni[i] || \"\",\n            provincia: province[i] || \"\",\n            codiceComune: codiciComune[i] || \"\",\n            categoriaCatastale: categorie[i] || \"\",\n            renditaCatastale: rendite[i] || 0,\n            quotaPossesso: 100,\n            superficie: undefined,\n            vani: undefined,\n            abitazionePrincipale: false,\n            locato: false,\n            pertinenze: [],\n            foglio: undefined,\n            particella: undefined,\n            subalterno: undefined,\n            analisiCompleta: false,\n            datiMancanti: []\n        });\n    }\n    return properties.length > 0 ? properties : [\n        createEmptyProperty(fileName)\n    ];\n}\n// Crea una proprietà vuota da completare manualmente\nfunction createEmptyProperty(fileName) {\n    return {\n        id: generateId(),\n        address: `Immobile da ${fileName}`,\n        comune: \"\",\n        provincia: \"\",\n        codiceComune: \"\",\n        categoriaCatastale: \"\",\n        renditaCatastale: 0,\n        quotaPossesso: 100,\n        superficie: undefined,\n        vani: undefined,\n        abitazionePrincipale: false,\n        locato: false,\n        pertinenze: [],\n        foglio: undefined,\n        particella: undefined,\n        subalterno: undefined,\n        analisiCompleta: false,\n        datiMancanti: [\n            \"abitazionePrincipale\",\n            \"locato\",\n            \"comune\",\n            \"provincia\",\n            \"categoriaCatastale\",\n            \"renditaCatastale\"\n        ]\n    };\n}\nfunction generateId() {\n    return Math.random().toString(36).substr(2, 9);\n}\n// Funzione per normalizzare i nomi dei comuni (case-insensitive, rimuove spazi)\nfunction normalizeComune(str) {\n    return str.trim().toLowerCase().replace(/\\s+/g, \"\");\n}\n// Funzione di lookup su Supabase\nasync function getMunicipalityData(comune, provincia) {\n    const supabaseUrl = process.env.SUPABASE_URL;\n    const supabaseAnonKey = process.env.SUPABASE_ANON;\n    if (!supabaseUrl || !supabaseAnonKey) return null;\n    const supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_1__.createClient)(supabaseUrl, supabaseAnonKey);\n    // Normalizza il nome del comune\n    const normalizedComune = normalizeComune(comune);\n    const { data, error } = await supabase.from(\"municipalities\").select(\"name, province, codice\").ilike(\"name\", normalizedComune).eq(\"province\", provincia.toUpperCase()).limit(1).single();\n    if (error || !data) return null;\n    return {\n        name: data.name,\n        province: data.province,\n        codiceComune: data.codice\n    };\n}\n// Dopo aver estratto le proprietà dall'AI, aggiorna ogni proprietà con i dati da municipalities\nasync function enrichPropertiesWithMunicipality(properties) {\n    const enriched = [];\n    for (const prop of properties){\n        if (prop.comune && prop.provincia) {\n            const municipality = await getMunicipalityData(prop.comune, prop.provincia);\n            if (municipality) {\n                enriched.push({\n                    ...prop,\n                    comune: municipality.name,\n                    provincia: municipality.province,\n                    codiceComune: municipality.codiceComune\n                });\n                continue;\n            }\n        }\n        enriched.push(prop);\n    }\n    return enriched;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./app/api/analyze/route.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@supabase","vendor-chunks/tr46","vendor-chunks/whatwg-url","vendor-chunks/webidl-conversions"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=%2FUsers%2Fmattiapicca%2FDocuments%2Flivn%2Flivn%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fmattiapicca%2FDocuments%2Flivn%2Flivn&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();