/**
 * Script di test con attesa prolungata per i risultati OpenAPI
 */

const dotenv = require('dotenv');
const path = require('path');

// Carica le variabili d'ambiente
dotenv.config({ path: path.join(__dirname, '../.env.local') });

// Configurazione
const config = {
  baseUrl: process.env.OPENAPI_BASE_URL || 'https://catasto.openapi.it',
  catasto_token: process.env.OPENAPI_CATASTO_TOKEN || ''
};

// Codice fiscale reale (corretto)
const REAL_CF = 'MTTPCC94S01H727X';

/**
 * Attendi risultati con polling
 */
async function waitForResults(requestId, maxAttempts = 10, intervalMs = 10000) {
  console.log(`‚è≥ Attesa risultati per ID: ${requestId}`);
  console.log(`üîÑ Max tentativi: ${maxAttempts}, Intervallo: ${intervalMs/1000}s`);
  
  for (let attempt = 1; attempt <= maxAttempts; attempt++) {
    console.log(`\nüì° Tentativo ${attempt}/${maxAttempts}...`);
    
    try {
      const response = await fetch(`${config.baseUrl}/richiesta/${requestId}`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${config.catasto_token}`,
        }
      });
      
      if (!response.ok) {
        console.log(`‚ùå Errore HTTP: ${response.status}`);
        continue;
      }
      
      const result = await response.json();
      console.log(`üìä Stato: ${result.data?.stato || 'N/A'}`);
      
      if (result.data?.stato === 'evasa') {
        console.log('‚úÖ Risultati pronti!');
        return { success: true, data: result };
      } else if (result.data?.stato === 'errore') {
        console.log('‚ùå Errore nella ricerca');
        return { success: false, error: 'Errore nel processing', data: result };
      } else {
        console.log(`‚è≥ Ancora in elaborazione... (${result.data?.stato || 'unknown'})`);
      }
      
      if (attempt < maxAttempts) {
        console.log(`‚è∞ Attesa ${intervalMs/1000} secondi prima del prossimo tentativo...`);
        await new Promise(resolve => setTimeout(resolve, intervalMs));
      }
      
    } catch (error) {
      console.log(`‚ùå Errore nel tentativo ${attempt}:`, error.message);
    }
  }
  
  return { success: false, error: 'Timeout - risultati non pronti', data: null };
}

/**
 * Analizza i risultati della ricerca
 */
function analyzeResults(data) {
  console.log('\nüìà Analisi Dettagliata Risultati:');
  
  if (!data?.data?.risultato) {
    console.log('‚ÑπÔ∏è Nessun risultato disponibile');
    return;
  }
  
  const risultato = data.data.risultato;
  
  // Province trovate
  if (risultato.province && risultato.province.length > 0) {
    console.log(`\nüèôÔ∏è Province con immobili: ${risultato.province.length}`);
    risultato.province.forEach((prov, index) => {
      console.log(`  ${index + 1}. ${prov.provincia} - ${prov.numero_immobili || 'N/A'} immobili`);
    });
  }
  
  // Immobili diretti
  if (risultato.immobili && risultato.immobili.length > 0) {
    console.log(`\nüè† Immobili trovati direttamente: ${risultato.immobili.length}`);
    risultato.immobili.forEach((immobile, index) => {
      console.log(`\n  üìç Immobile ${index + 1}:`);
      console.log(`     üìÆ Indirizzo: ${immobile.indirizzo || 'N/A'}`);
      console.log(`     üè∑Ô∏è Categoria: ${immobile.categoria || 'N/A'}`);
      console.log(`     üí∞ Rendita: ${immobile.rendita || 'N/A'}`);
      console.log(`     üìë Foglio: ${immobile.foglio || 'N/A'}`);
      console.log(`     üî¢ Particella: ${immobile.particella || 'N/A'}`);
      console.log(`     üè† Subalterno: ${immobile.subalterno || 'N/A'}`);
    });
  }
  
  // Proprietari
  if (risultato.intestatari && risultato.intestatari.length > 0) {
    console.log(`\nüë• Proprietari trovati: ${risultato.intestatari.length}`);
    risultato.intestatari.forEach((intestatario, index) => {
      console.log(`  ${index + 1}. ${intestatario.denominazione || intestatario.nome + ' ' + intestatario.cognome}`);
      console.log(`     üìÑ CF: ${intestatario.codice_fiscale || 'N/A'}`);
      console.log(`     üèõÔ∏è Propriet√†: ${intestatario.tipo_diritto || 'N/A'}`);
      console.log(`     üìä Quota: ${intestatario.quota || 'N/A'}`);
    });
  }
  
  if (!risultato.province?.length && !risultato.immobili?.length && !risultato.intestatari?.length) {
    console.log('‚ÑπÔ∏è Nessun immobile trovato per questo codice fiscale');
    console.log('üí° Possibili motivi:');
    console.log('   - Non possiedi immobili registrati al catasto');
    console.log('   - Gli immobili sono registrati con CF diverso');
    console.log('   - Problemi temporanei nell\'elaborazione');
  }
}

/**
 * Test completo con attesa prolungata
 */
async function testWithLongWait() {
  console.log('üöÄ Test Ricerca Catastale con Attesa Prolungata\n');
  
  if (!config.catasto_token) {
    console.log('‚ùå Token catasto non configurato!');
    return;
  }
  
  console.log('üîß Configurazione:');
  console.log(`üìç Base URL: ${config.baseUrl}`);
  console.log(`üìÑ Codice Fiscale: ${REAL_CF}`);
  
  try {
    // Fase 1: Avvia ricerca
    console.log('\n1Ô∏è‚É£ Avvio Ricerca Nazionale...');
    const searchResponse = await fetch(`${config.baseUrl}/richiesta/ricerca_nazionale`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${config.catasto_token}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        cf_piva: REAL_CF,
        tipo_catasto: 'TF'
      })
    });
    
    if (!searchResponse.ok) {
      const error = await searchResponse.text();
      console.log('‚ùå Errore nella richiesta:', error);
      return;
    }
    
    const searchResult = await searchResponse.json();
    const requestId = searchResult.data?.id;
    
    if (!requestId) {
      console.log('‚ùå ID richiesta non trovato');
      return;
    }
    
    console.log(`‚úÖ Ricerca avviata con ID: ${requestId}`);
    
    // Fase 2: Attendi risultati con polling
    const finalResult = await waitForResults(requestId, 12, 10000); // 2 minuti totali
    
    if (finalResult.success) {
      console.log('\nüéâ Risultati ottenuti con successo!');
      analyzeResults(finalResult.data);
      
      // Salva risultati per l'app
      console.log('\nüíæ Dati pronti per l\'integrazione nell\'app React!');
      
    } else {
      console.log('\n‚ö†Ô∏è Risultati non pronti');
      console.log('üí° La ricerca potrebbe essere ancora in corso');
      console.log('üîÑ Riprova tra qualche minuto o controlla su OpenAPI console');
    }
    
  } catch (error) {
    console.log('‚ùå Errore generale:', error.message);
  }
}

// Esegui test
if (require.main === module) {
  testWithLongWait().catch(console.error);
}

module.exports = { waitForResults, analyzeResults }; 